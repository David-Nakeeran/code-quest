generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model cq_questions {
  id             BigInt     @id @default(autoincrement())
  question_text  String
  options        Json
  correct_answer String
  created_at     DateTime?  @default(now()) @db.Timestamptz(6)
  quiz_id        BigInt
  cq_quizzes     cq_quizzes @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model cq_quizzes {
  id           BigInt         @id @default(autoincrement())
  topic        String
  ai_generated Boolean?       @default(true)
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  cq_questions cq_questions[]
}

model cq_user_progress {
  id       BigInt   @id @default(autoincrement())
  xp       Int?     @default(0)
  level    Int?     @default(1)
  user_id  String
  cq_users cq_users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model cq_users {
  id                 String               @id
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  cq_user_progress   cq_user_progress[]
  cq_user_quiz_stats cq_user_quiz_stats[]
}

model cq_topics {
  id     BigInt  @id @default(autoincrement())
  name   String
  level  String
  active Boolean @default(true)
}

model cq_user_quiz_stats {
  id        BigInt   @id @default(autoincrement())
  user_id   String
  level     String
  topic     String
  correct   Int      @default(0)
  attempted Int      @default(0)
  cq_users  cq_users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
